1)http://code.google.com/p/msysgit/downloads/list
Git-1.7.8-preview20111206.exe
2)mkdir .ssh
3)cd ~/.ssh
4)ssh-keygen -t rsa -C "andrew.gucalyuk@gmail.com"
5)On the GitHub site Click “Account Settings” > Click “SSH Public Keys” > Click “Add another public key”
6)Open the id_rsa.pub file with a text editor (Notepad, TextEdit, or gedit will do just fine). This is your public SSH key. You may need turn on “view hidden files” to find it because the .ssh directory is hidden. It’s important you copy your SSH key exactly as it is written without adding any newlines or whitespace. Now paste it into the “Key” field.
7)Hit “Add Key.”
8)git config --global user.name "z-force"
git config --global user.email "andrew.gucalyuk@gmail.com"
9)git config --global github.user z-force
git config --global github.token 09afe1a43bf9ccae68764fd1701e7420
10)vim config
11)Host github.com
  User z-force
  Port 22
  Hostname github.com
  IdentityFile ~/.ssh/имя твоего ключа
  IdentitiesOnly yes
12)cd ..
13)git clone git@github.com:z-force/model_gps.git model_gps
14)cd model_gps
15)gitk --all
16)git pull
17)git add README
18)git commit -m "README: testing"
19)git push
20)Сохранение состояния
Собираетесь попробовать внести некие радикальные изменения? Предварительно создайте снимок всех файлов в текущем каталоге с помощью команд
$ git init
$ git add .
$ git commit -m "Моя первая резервная копия"
Теперь, если новые правки всё испортили, можно восстановить первоначальную версию:
$ git reset --hard
Чтобы вновь сохранить состояние:
$ git commit -a -m "Другая резервная копия"
21)Аналогично, если хотите, чтобы Git забыл о некоторых файлах:
$ git rm ляп.h старье.c
$ git rm -r улики/
Git удалит эти файлы, если вы не удалили их сами.
22)Переименование файла
$ git mv bug.c feature.c
23)Иногда просто хочется вернуться назад и забыть все изменения до определенного момента, потому что все они были неправильными. В таком случае
$ git log
покажет список последних коммитов и их хеши SHA1:
q
показать с псевдографикой
git log --graph
24)$ git reset --hard 766f
для восстановления состояния до указанного коммита и удаления всех последующих безвозвратно.
25)Возможно, в другой раз вы захотите быстро перескочить к старому состоянию. В этом случае наберите
$ git checkout 82f5
Эта команда перенесет вас назад во времени, сохранив при этом более новые коммиты. Однако, как и в фантастических фильмах о путешествиях во времени, если теперь вы отредактируете и закоммитите код, то попадете в альтернативную реальность, потому что ваши действия отличаются от тех, что были в прошлый раз.
Эта альтернативная реальность называется «веткой» (branch, прим. пер.), и чуть позже мы поговорим об этом подробнее. А сейчас просто запомните, что команда
$ git checkout master
вернет вас обратно в настоящее. Кроме того, чтобы не получать предупреждений от Git, всегда делайте commit или сбрасывайте изменения перед запуском checkout.
Еще раз воспользуемся аналогией с компьютерными играми:
git reset --hard: загружает ранее сохраненную игру и удаляет все версии, сохраненные после только что загруженной.
git checkout: загружает старую игру, но если вы продолжаете играть, состояние игры будет отличаться от более новых сохранений, которые вы сделали в первый раз. Любая игра, которую вы теперь сохраняете, попадает в отдельную ветку, представляющую альтенативную реальность, в которую вы попали. Мы обсудим это позже.
26)$ git revert 1b6d
отменит коммит с заданным хешем. Откат будет сохранен в виде нового коммита. 
27)Создать лог изменений
$ git log > ChangeLog 
28)Загрузить копию проекта
$ git clone git://сервер/путь/до/файлов
29)Выясните, какие изменения вы сделали со времени последнего коммита:
$ git diff
30)Статус изменений
git status
31)Создать новую ветку для экспериментов
git branch experimentalBranch
переключиться на неё
git checkout experimentalBranch
коммитим что нужно
вернуться обратно
git checkout master
32)Выполнить сведение веток, находясь в ветке master
git merge experimentalBranch
33)$ ssh-add ~/.ssh/id_rsa добавить сгенерированный ключ в систему
